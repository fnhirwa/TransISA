name: Run Exhaustive Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-tests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # Run on both Linux and macOS
        include:
          - os: ubuntu-latest
            target: x86_64
          - os: macos-latest
            target: arm64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libgtest-dev ninja-build llvm-19 llvm-19-dev clang-19 lld-19 lldb-19
          
          echo "LLVM_DIR=/usr/lib/llvm-19/cmake" >> $GITHUB_ENV
          echo "CC=/usr/bin/clang-19" >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++-19" >> $GITHUB_ENV
          echo "CMAKE_AR=/usr/bin/llvm-ar-19" >> $GITHUB_ENV
          echo "CMAKE_RANLIB=/usr/bin/llvm-ranlib-19" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/lib/llvm-19/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PATH=/usr/lib/llvm-19/bin:$PATH" >> $GITHUB_ENV

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja llvm@19
          
          # Store LLVM path for easy reference
          LLVM_PREFIX=$(brew --prefix llvm@19)
          
          # Set up environment variables
          echo "LLVM_DIR=${LLVM_PREFIX}/lib/cmake/llvm" >> $GITHUB_ENV
          echo "CC=${LLVM_PREFIX}/bin/clang" >> $GITHUB_ENV
          echo "CXX=${LLVM_PREFIX}/bin/clang++" >> $GITHUB_ENV
          
          # Critical fix - set compiler flags to use LLVM's libc++ instead of system
          echo "CXXFLAGS=-stdlib=libc++ -nostdinc++ -I${LLVM_PREFIX}/include/c++/v1 -I${LLVM_PREFIX}/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L${LLVM_PREFIX}/lib -Wl,-rpath,${LLVM_PREFIX}/lib" >> $GITHUB_ENV
          
          # Set other required paths
          echo "PATH=${LLVM_PREFIX}/bin:$PATH" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=${LLVM_PREFIX}/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Verify LLVM Installation
        run: |
          echo "Using Clang version:"
          clang --version
          echo "Using LLVM version:"
          llvm-config --version
          echo "LLVM CXX Flags:"
          llvm-config --cxxflags

      - name: Clean and Rebuild
        run: |
          rm -rf build # Delete old build artifacts
          
          # Create a verbose CMake command with all needed flags
          cmake -B build -S . -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.target }} \
            -DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
            -DCMAKE_C_FLAGS="${CFLAGS}" \
            -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
            -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}" \
            -DCMAKE_MODULE_LINKER_FLAGS="${LDFLAGS}"
        env:
          LLVM_DIR: ${{ env.LLVM_DIR }}
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
          CXXFLAGS: ${{ env.CXXFLAGS }}
          LDFLAGS: ${{ env.LDFLAGS }}
          PATH: ${{ env.PATH }}
          DYLD_LIBRARY_PATH: ${{ env.DYLD_LIBRARY_PATH }}

      - name: Debug Static Library Issues (if build fails)
        if: failure()
        run: |
          file build/src/ir/libir_lib.a || echo "libir_lib.a not found"
          file build/src/parser/libparser_lib.a || echo "libparser_lib.a not found"
          nm -g build/src/ir/libir_lib.a || echo "No symbols in libir_lib.a"
          nm -g build/src/parser/libparser_lib.a || echo "No symbols in libparser_lib.a"

      - name: Run Tests
        run: |
          cd build
          ninja run_all_tests