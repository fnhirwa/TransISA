name: Run Exhaustive Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  run-tests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libgtest-dev
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.6/clang+llvm-19.1.6-$(uname -m)-linux-gnu.tar.xz
          tar xf clang+llvm-19.1.6-*-linux-gnu.tar.xz
          sudo mv clang+llvm-19.1.6-*-linux-gnu /opt/llvm-19.1.6
          echo "/opt/llvm-19.1.6/lib" | sudo tee /etc/ld.so.conf.d/llvm.conf
          sudo ldconfig
          echo "LLVM_DIR=/opt/llvm-19.1.6/lib/cmake/llvm" >> $GITHUB_ENV
          echo "CC=/opt/llvm-19.1.6/bin/clang" >> $GITHUB_ENV
          echo "CXX=/opt/llvm-19.1.6/bin/clang++" >> $GITHUB_ENV
          echo "PATH=/opt/llvm-19.1.6/bin:$PATH" >> $GITHUB_ENV

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja
          brew install llvm@19
          echo "LLVM_DIR=$(brew --prefix llvm@19)/lib/cmake/llvm" >> $GITHUB_ENV
          echo "CC=$(brew --prefix llvm@19)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@19)/bin/clang++" >> $GITHUB_ENV
          echo "CMAKE_CXX_FLAGS=-stdlib=libc++ -isystem $(brew --prefix llvm@19)/include/c++/v1" >> $GITHUB_ENV
          echo "PATH=$(brew --prefix llvm@19)/bin:$PATH" >> $GITHUB_ENV

      - name: Verify Toolchain
        run: |
          echo "Clang version:"
          $CC --version
          echo "LLVM version:"
          $CXX -print-resource-dir
          echo "Include paths:"
          $CXX -E -x c++ - -v < /dev/null 2>&1 | grep -A20 '#include <...>'

      - name: Configure with Isolated Headers
        run: |
          cmake -B build -S . -G Ninja \
            -DCMAKE_C_COMPILER=$CC \
            -DCMAKE_CXX_COMPILER=$CXX \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_FLAGS="$CMAKE_CXX_FLAGS" \
            -DLLVM_DIR=$LLVM_DIR \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON

      - name: Build Project
        run: |
          cmake --build build --verbose

      - name: Run Tests
        working-directory: ./build
        run: ctest --output-on-failure