name: Run Exhaustive Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-tests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache LLVM (macOS)
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        with:
          path: /usr/local/opt/llvm@19
          key: ${{ runner.os }}-llvm-19

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build llvm-19 llvm-19-dev clang-19 lld-19 libclang-19-dev
          
          # Set environment variables
          echo "LLVM_DIR=/usr/lib/llvm-19/lib/cmake/llvm" >> $GITHUB_ENV
          echo "CC=clang-19" >> $GITHUB_ENV
          echo "CXX=clang++-19" >> $GITHUB_ENV
          echo "PATH=/usr/lib/llvm-19/bin:$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/lib/llvm-19/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja llvm@19
          
          # Set environment variables
          LLVM_PREFIX=$(brew --prefix llvm@19)
          echo "LLVM_DIR=$LLVM_PREFIX/lib/cmake/llvm" >> $GITHUB_ENV
          echo "CC=$LLVM_PREFIX/bin/clang" >> $GITHUB_ENV
          echo "CXX=$LLVM_PREFIX/bin/clang++" >> $GITHUB_ENV
          echo "PATH=$LLVM_PREFIX/bin:$PATH" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$LLVM_PREFIX/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Verify LLVM Installation
        run: |
          echo "LLVM_DIR: $LLVM_DIR"
          echo "Using compiler:"
          $CXX --version
          echo "LLVM components:"
          llvm-config --components
          echo "LLVM version:"
          llvm-config --version | grep "19" || (echo "Wrong LLVM version installed" && exit 1)

      - name: Configure and Build
        run: |
          mkdir -p build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=$CC \
            -DCMAKE_CXX_COMPILER=$CXX \
            -DLLVM_DIR=$LLVM_DIR \
            -G Ninja
          cmake --build . --verbose

      - name: Run Tests
        run: |
          cd build
          ctest --output-on-failure -j$(nproc || sysctl -n hw.ncpu)

      - name: Debug Build Issues (if failure)
        if: failure()
        run: |
          find build -name "*.a" -exec file {} \;
          find build -name "*.a" -exec nm -g {} \; || echo "Symbols not available"
          llvm-config --cxxflags
          llvm-config --ldflags